import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useRouter } from "next/router";
import Link from "next/link";
import { useState } from "react";
import dynamic from 'next/dynamic'

//NOTE: this is adapted from an old jquery library and I dont quite know the types
const Terminal : any = dynamic(() => import('../components/terminal'),
    { loading: () => <p>Now Loading...</p>, ssr: false }
);



const Home: NextPage = () => {
  const router = useRouter();
  const [command, setCommand] = useState('');

  const help = (command : any, terminal : any) => {
    router.push(`/resume`);

  }

  const blog = () => {
    router.push(`/resume`);
  }

  const projects = () => {
    router.push(`/resume`);
  }

  //TODO: flag s ~ short
  //TODO: flag ~ PDF
  const resume = () => {
    router.push(`/resume`);
  }

  return (
    <>
      <Head>
        <title>Howdy Partner!</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="tv">
        <div className="collection external terminal" id="terminal">
          <nav className="menu flex flex-col">
            <p className="mr-[60%] mt-12"> Hello, My name is Trynn Zala. My life is a sequence of strange events.
              So I have become a bit of an expert solving such strange events that happen through electricity,
              language, and society. More intro stuff blah blah blah blah blah blah
            </p>
            <Link href="/resume"><a className="mt-2 indent-2">Resume</a></Link>
            <Link href="/resume"><a className="mt-1 indent-6">Blog</a></Link>
            <Link href="/resume"><a className="mt-1 indent-10">Projects</a></Link>
          </nav>
          <Terminal
          interpreter ={(command : string , term : any) => {
            if(command == "blog") blog();
            if(command == "project") projects();
            if(command == "resume") resume();
          }}
          clear={true}
          outputLimit={0}
          command={command}
          onCommandChange={(command : any) => setCommand(command)}
          greetings=""/>
        </div>
        <div className="flicker"></div>
        <div className="before:before-scanlines scanlines after:after-scanlines"></div>
      </main>
    </>
  );
};

export default Home;
